name: CI/CD

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
    types: [opened, synchronize]

jobs:
  filter:
    name: Detect Changed Paths
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      web: ${{ steps.filter.outputs.web }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: filter
        name: Filter paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'packages/eslint-config/**'
              - 'packages/jest-config/**'
              - 'packages/typescript-config/**'
              - 'pnpm-lock.yaml'
            web:
              - 'apps/web/**'
              - 'packages/ui/**'
              - 'packages/eslint-config/**'
              - 'packages/jest-config/**'
              - 'packages/typescript-config/**'
              - 'pnpm-lock.yaml'

  build:
    name: Build & Test
    needs: filter
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client for API
        working-directory: apps/api
        run: pnpm exec prisma generate

      - name: Run Build
        run: pnpm build

      - name: Run Tests
        run: pnpm test

  deploy-api:
    name: API → Render
    needs: build
    if: needs.filter.outputs.api == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Deploy to Render
        uses: render-actions/deploy-service@v1
        with:
          api_key: ${{ secrets.RENDER_API_KEY }}
          service_id: ${{ secrets.RENDER_SERVICE_ID }}

  deploy-web:
    name: Web → Vercel
    needs: build
    if: needs.filter.outputs.web == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
