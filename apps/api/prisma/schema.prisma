generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String         @id @default(uuid())
  username          String
  email             String         @unique
  password          String
  tokenVersion      Int            @default(1)
  createdAt         DateTime       @default(now())
  isVerified        Boolean        @default(false)
  verificationToken String?        @unique
  folders           Folder[]       @relation("UserFolders")
  refreshTokens     RefreshToken[] @relation("UserRefreshTokens")
  tasks             Task[]         @relation("UserTasks")
}

model RefreshToken {
  userId    String
  token     String   @id
  expiresAt DateTime
  revoked   Boolean  @default(false)
  sessionId String
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id           String    @id @default(uuid())
  title        String
  userId       String
  parentTaskId String?
  description  String?
  completed    Boolean   @default(false)
  folderId     String?
  expiresDate  DateTime?
  startDate    DateTime? @default(now())
  lastEdited   DateTime  @default(now()) @updatedAt
  folder       Folder?   @relation("TaskFolders", fields: [folderId], references: [id])
  parentTask   Task?     @relation("Subtasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subtasks     Task[]    @relation("Subtasks")
  user         User      @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id     String @id @default(uuid())
  name   String
  userId String
  user   User   @relation("UserFolders", fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[] @relation("TaskFolders")
}
